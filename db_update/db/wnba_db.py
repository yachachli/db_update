# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.4
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "wnba_player_game_stats_upsert",
    "wnba_player_season_stats_upsert",
    "wnba_player_upsert",
    "wnba_season_id",
    "wnba_team_upsert",
)

import typing

if typing.TYPE_CHECKING:
    import asyncpg
    import collections.abc
    import datetime
    import decimal

    ConnectionLike: typing.TypeAlias = asyncpg.Connection[asyncpg.Record] | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]

from db_update.db import models


WNBA_PLAYER_GAME_STATS_UPSERT: typing.Final[str] = """-- name: WnbaPlayerGameStatsUpsert :exec
INSERT INTO wnba_player_game_stats (
    player_id,
    game_id,
    team_id,
    minutes_played,
    points,
    rebounds,
    assists,
    steals,
    blocks,
    turnovers,
    offensive_rebounds,
    defensive_rebounds,
    free_throw_percentage,
    plus_minus,
    technical_fouls,
    field_goal_attempts,
    three_point_fg_percentage,
    field_goals_made,
    field_goal_percentage,
    three_point_fg_made,
    free_throw_attempts,
    three_point_fg_attempts,
    personal_fouls,
    free_throws_made,
    fantasy_points,
    home_away,
    opponent,
    game_date,
    team_abv
) 
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29
)
ON CONFLICT (player_id, game_id) DO UPDATE SET 
    minutes_played            = EXCLUDED.minutes_played,
    points                    = EXCLUDED.points,
    rebounds                  = EXCLUDED.rebounds,
    assists                   = EXCLUDED.assists,
    steals                    = EXCLUDED.steals,
    blocks                    = EXCLUDED.blocks,
    turnovers                 = EXCLUDED.turnovers,
    offensive_rebounds        = EXCLUDED.offensive_rebounds,
    defensive_rebounds        = EXCLUDED.defensive_rebounds,
    free_throw_percentage     = EXCLUDED.free_throw_percentage,
    plus_minus                = EXCLUDED.plus_minus,
    technical_fouls           = EXCLUDED.technical_fouls,
    field_goal_attempts       = EXCLUDED.field_goal_attempts,
    three_point_fg_percentage = EXCLUDED.three_point_fg_percentage,
    field_goals_made          = EXCLUDED.field_goals_made,
    field_goal_percentage     = EXCLUDED.field_goal_percentage,
    three_point_fg_made       = EXCLUDED.three_point_fg_made,
    free_throw_attempts       = EXCLUDED.free_throw_attempts,
    three_point_fg_attempts   = EXCLUDED.three_point_fg_attempts,
    personal_fouls            = EXCLUDED.personal_fouls,
    free_throws_made          = EXCLUDED.free_throws_made,
    fantasy_points            = EXCLUDED.fantasy_points,
    home_away                 = EXCLUDED.home_away,
    opponent                  = EXCLUDED.opponent,
    game_date                 = EXCLUDED.game_date,
    team_abv                  = EXCLUDED.team_abv
"""

WNBA_PLAYER_SEASON_STATS_UPSERT: typing.Final[str] = """-- name: WnbaPlayerSeasonStatsUpsert :exec
INSERT INTO wnba_player_season_stats (
    player_id,
    season_id,
    games_played,
    points_per_game,
    rebounds_per_game,
    assists_per_game,
    steals_per_game,
    blocks_per_game,
    turnovers_per_game,
    field_goal_percentage,
    three_point_percentage,
    free_throw_percentage,
    minutes_per_game,
    offensive_rebounds_per_game,
    defensive_rebounds_per_game,
    field_goals_made_per_game,
    field_goals_attempted_per_game,
    three_pointers_made_per_game,
    three_pointers_attempted_per_game,
    free_throws_made_per_game,
    free_throws_attempted_per_game
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21
)
ON CONFLICT (player_id, season_id) DO UPDATE SET 
    games_played                      = EXCLUDED.games_played,
    points_per_game                   = EXCLUDED.points_per_game,
    rebounds_per_game                 = EXCLUDED.rebounds_per_game,
    assists_per_game                  = EXCLUDED.assists_per_game,
    steals_per_game                   = EXCLUDED.steals_per_game,
    blocks_per_game                   = EXCLUDED.blocks_per_game,
    turnovers_per_game                = EXCLUDED.turnovers_per_game,
    field_goal_percentage             = EXCLUDED.field_goal_percentage,
    three_point_percentage            = EXCLUDED.three_point_percentage,
    free_throw_percentage             = EXCLUDED.free_throw_percentage,
    minutes_per_game                  = EXCLUDED.minutes_per_game,
    offensive_rebounds_per_game       = EXCLUDED.offensive_rebounds_per_game,
    defensive_rebounds_per_game       = EXCLUDED.defensive_rebounds_per_game,
    field_goals_made_per_game         = EXCLUDED.field_goals_made_per_game,
    field_goals_attempted_per_game    = EXCLUDED.field_goals_attempted_per_game,
    three_pointers_made_per_game      = EXCLUDED.three_pointers_made_per_game,
    three_pointers_attempted_per_game = EXCLUDED.three_pointers_attempted_per_game,
    free_throws_made_per_game         = EXCLUDED.free_throws_made_per_game,
    free_throws_attempted_per_game    = EXCLUDED.free_throws_attempted_per_game
"""

WNBA_PLAYER_UPSERT: typing.Final[str] = """-- name: WnbaPlayerUpsert :exec
INSERT INTO wnba_players (name, position, team_id, player_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT (player_id) DO UPDATE SET
    name       = EXCLUDED.name,
    position   = EXCLUDED.position,
    team_id    = EXCLUDED.team_id,
    player_pic = EXCLUDED.player_pic,
    injury     = EXCLUDED.injury
"""

WNBA_SEASON_ID: typing.Final[str] = """-- name: WnbaSeasonId :one
SELECT id FROM wnba_seasons WHERE season_year = $1
"""

WNBA_TEAM_UPSERT: typing.Final[str] = """-- name: WnbaTeamUpsert :exec
INSERT INTO wnba_teams (
    name,
    team_city,
    team_abv,
    conference,
    ppg,
    oppg,
    wins,
    loss,
    team_bpg,
    team_spg,
    team_apg,
    team_fga,
    team_fgm,
    team_fta,
    team_tov
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15
)
ON CONFLICT (team_abv) DO UPDATE SET
    name       = EXCLUDED.name,
    team_city  = EXCLUDED.team_city,
    conference = EXCLUDED.conference,
    ppg        = EXCLUDED.ppg,
    oppg       = EXCLUDED.oppg,
    wins       = EXCLUDED.wins,
    loss       = EXCLUDED.loss,
    team_bpg   = EXCLUDED.team_bpg,
    team_spg   = EXCLUDED.team_spg,
    team_apg   = EXCLUDED.team_apg,
    team_fga   = EXCLUDED.team_fga,
    team_fgm   = EXCLUDED.team_fgm,
    team_fta   = EXCLUDED.team_fta,
    team_tov   = EXCLUDED.team_tov
"""


async def wnba_player_game_stats_upsert(conn: ConnectionLike, *, player_id: int, game_id: str, team_id: int, minutes_played: decimal.Decimal, points: int, rebounds: int, assists: int, steals: int, blocks: int, turnovers: int, offensive_rebounds: int, defensive_rebounds: int, free_throw_percentage: decimal.Decimal, plus_minus: decimal.Decimal, technical_fouls: int, field_goal_attempts: int, three_point_fg_percentage: decimal.Decimal, field_goals_made: int, field_goal_percentage: decimal.Decimal, three_point_fg_made: int, free_throw_attempts: int, three_point_fg_attempts: int, personal_fouls: int, free_throws_made: int, fantasy_points: decimal.Decimal, home_away: str, opponent: str, game_date: datetime.date, team_abv: str) -> None:
    await conn.execute(WNBA_PLAYER_GAME_STATS_UPSERT, player_id, game_id, team_id, minutes_played, points, rebounds, assists, steals, blocks, turnovers, offensive_rebounds, defensive_rebounds, free_throw_percentage, plus_minus, technical_fouls, field_goal_attempts, three_point_fg_percentage, field_goals_made, field_goal_percentage, three_point_fg_made, free_throw_attempts, three_point_fg_attempts, personal_fouls, free_throws_made, fantasy_points, home_away, opponent, game_date, team_abv)


async def wnba_player_season_stats_upsert(conn: ConnectionLike, *, player_id: int, season_id: int, games_played: int, points_per_game: decimal.Decimal, rebounds_per_game: decimal.Decimal, assists_per_game: decimal.Decimal, steals_per_game: decimal.Decimal, blocks_per_game: decimal.Decimal, turnovers_per_game: decimal.Decimal, field_goal_percentage: decimal.Decimal, three_point_percentage: decimal.Decimal, free_throw_percentage: decimal.Decimal, minutes_per_game: decimal.Decimal, offensive_rebounds_per_game: decimal.Decimal, defensive_rebounds_per_game: decimal.Decimal, field_goals_made_per_game: decimal.Decimal, field_goals_attempted_per_game: decimal.Decimal, three_pointers_made_per_game: decimal.Decimal, three_pointers_attempted_per_game: decimal.Decimal, free_throws_made_per_game: decimal.Decimal, free_throws_attempted_per_game: decimal.Decimal) -> None:
    await conn.execute(WNBA_PLAYER_SEASON_STATS_UPSERT, player_id, season_id, games_played, points_per_game, rebounds_per_game, assists_per_game, steals_per_game, blocks_per_game, turnovers_per_game, field_goal_percentage, three_point_percentage, free_throw_percentage, minutes_per_game, offensive_rebounds_per_game, defensive_rebounds_per_game, field_goals_made_per_game, field_goals_attempted_per_game, three_pointers_made_per_game, three_pointers_attempted_per_game, free_throws_made_per_game, free_throws_attempted_per_game)


async def wnba_player_upsert(conn: ConnectionLike, *, name: str, position: str, team_id: int, player_id: int) -> None:
    await conn.execute(WNBA_PLAYER_UPSERT, name, position, team_id, player_id)


async def wnba_season_id(conn: ConnectionLike, *, season_year: str) -> int | None:
    row = await conn.fetchrow(WNBA_SEASON_ID, season_year)
    if row is None:
        return None
    return row[0]


async def wnba_team_upsert(conn: ConnectionLike, *, name: str, team_city: str, team_abv: str, conference: str, ppg: float, oppg: float, wins: int, loss: int, team_bpg: float, team_spg: float, team_apg: float, team_fga: float, team_fgm: float, team_fta: float, team_tov: float) -> None:
    await conn.execute(WNBA_TEAM_UPSERT, name, team_city, team_abv, conference, ppg, oppg, wins, loss, team_bpg, team_spg, team_apg, team_fga, team_fgm, team_fta, team_tov)
