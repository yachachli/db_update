# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.4
from __future__ import annotations

__all__: collections.abc.Sequence[str] = (
    "mlb_player_game_stats_upsert",
    "mlb_players_upsert",
    "mlb_teams_upsert",
)

import typing

if typing.TYPE_CHECKING:
    import asyncpg
    import collections.abc
    import datetime
    import decimal

    ConnectionLike: typing.TypeAlias = asyncpg.Connection[asyncpg.Record] | asyncpg.pool.PoolConnectionProxy[asyncpg.Record]

from db_update.db import models


MLB_PLAYER_GAME_STATS_UPSERT: typing.Final[str] = """-- name: MlbPlayerGameStatsUpsert :exec
INSERT INTO mlb_player_game_stats (
    player_id,
    game_id,
    team,
    started,
    starting_position,
    all_positions_played,
    bb,
    ab,
    h,
    hr,
    rbi,
    so,
    avg,
    tb,
    doubles,
    triples,
    r,
    ibb,
    sf,
    sac,
    hbp,
    gidp,
    p_bb,
    p_h,
    p_hr,
    p_er,
    p_so,
    win,
    loss,
    save,
    era,
    innings_pitched,
    fielding_e,
    passed_ball,
    of_assists,
    pickoffs,
    sb,
    cs,
    po
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
    $31,
    $32,
    $33,
    $34,
    $35,
    $36,
    $37,
    $38,
    $39
)
ON CONFLICT (player_id, game_id) DO NOTHING
"""

MLB_PLAYERS_UPSERT: typing.Final[str] = """-- name: MlbPlayersUpsert :exec
INSERT INTO mlb_players (
    player_id,
    long_name,
    team_abv,
    pos,
    height,
    weight,
    bat,
    throw,
    b_day,
    mlb_headshot,
    espn_headshot,
    espn_status,
    injury_description,
    injury_return
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
ON CONFLICT (player_id) DO UPDATE SET
    long_name = excluded.long_name,
    team_abv = excluded.team_abv,
    pos = excluded.pos,
    height = excluded.height,
    weight = excluded.weight,
    bat = excluded.bat,
    throw = excluded.throw,
    b_day = excluded.b_day,
    mlb_headshot = excluded.mlb_headshot,
    espn_headshot = excluded.espn_headshot,
    espn_status = excluded.espn_status,
    injury_description = excluded.injury_description,
    injury_return = excluded.injury_return
"""

MLB_TEAMS_UPSERT: typing.Final[str] = """-- name: MlbTeamsUpsert :exec
INSERT INTO mlb_teams (
    team_abv,
    team_city,
    team_name,
    conference,
    division,
    rs,
    ra,
    wins,
    losses,
    run_diff
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT (team_abv) DO UPDATE SET
    team_city = excluded.team_city,
    team_name = excluded.team_name,
    conference = excluded.conference,
    division = excluded.division,
    rs = excluded.rs,
    ra = excluded.ra,
    wins = excluded.wins,
    losses = excluded.losses,
    run_diff = excluded.run_diff
"""


async def mlb_player_game_stats_upsert(conn: ConnectionLike, *, player_id: int, game_id: str, team: str | None, started: bool | None, starting_position: str | None, all_positions_played: str | None, bb: int | None, ab: int | None, h: int | None, hr: int | None, rbi: int | None, so: int | None, avg: float | None, tb: int | None, doubles: int | None, triples: int | None, r: int | None, ibb: int | None, sf: int | None, sac: int | None, hbp: int | None, gidp: int | None, p_bb: int | None, p_h: int | None, p_hr: int | None, p_er: int | None, p_so: int | None, win: str | None, loss: str | None, save: str | None, era: float | None, innings_pitched: float | None, fielding_e: int | None, passed_ball: int | None, of_assists: int | None, pickoffs: int | None, sb: int | None, cs: int | None, po: int | None) -> None:
    await conn.execute(MLB_PLAYER_GAME_STATS_UPSERT, player_id, game_id, team, started, starting_position, all_positions_played, bb, ab, h, hr, rbi, so, avg, tb, doubles, triples, r, ibb, sf, sac, hbp, gidp, p_bb, p_h, p_hr, p_er, p_so, win, loss, save, era, innings_pitched, fielding_e, passed_ball, of_assists, pickoffs, sb, cs, po)


async def mlb_players_upsert(conn: ConnectionLike, *, player_id: int, long_name: str, team_abv: str, pos: str, height: str, weight: int, bat: str | None, throw: str | None, b_day: datetime.date | None, mlb_headshot: str | None, espn_headshot: str | None, espn_status: str | None, injury_description: str | None, injury_return: str | None) -> None:
    await conn.execute(MLB_PLAYERS_UPSERT, player_id, long_name, team_abv, pos, height, weight, bat, throw, b_day, mlb_headshot, espn_headshot, espn_status, injury_description, injury_return)


async def mlb_teams_upsert(conn: ConnectionLike, *, team_abv: str, team_city: str | None, team_name: str, conference: str, division: str, rs: int, ra: int, wins: int, losses: int, run_diff: int) -> None:
    await conn.execute(MLB_TEAMS_UPSERT, team_abv, team_city, team_name, conference, division, rs, ra, wins, losses, run_diff)
